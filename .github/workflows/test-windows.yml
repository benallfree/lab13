name: Test Windows Compatibility

on:
  push:
    paths:
      - 'cli/**'
      - 'sdk/**'
      - 'games/mewsterpiece/**'
      - '.github/workflows/test-windows.yml'
  pull_request:
    paths:
      - 'cli/**'
      - 'sdk/**'
      - 'games/mewsterpiece/**'
      - '.github/workflows/test-windows.yml'

jobs:
  test-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: |
          bun install --frozen-lockfile

      - name: Build CLI
        working-directory: cli
        run: bun run build

      - name: Build SDK
        working-directory: sdk
        run: bun run build

      - name: Test build command (debug mode)
        working-directory: games/mewsterpiece
        shell: pwsh
        run: |
          Write-Host "=== Starting build test ==="
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "CLI exists: $(Test-Path ../../cli/dist/index.js)"

          # List files before build
          Write-Host "=== Files before build ==="
          Get-ChildItem | ForEach-Object { Write-Host "  $($_.Name)" }

          # Test the build command with debug output
          Write-Host "=== Running CLI build command ==="
          $result = & node ../../cli/dist/index.js build --debug 2>&1
          $exitCode = $LASTEXITCODE
          Write-Host "CLI exit code: $exitCode"
          Write-Host "CLI output:"
          Write-Host ($result -replace '\n', "`n")

          # List files after build
          Write-Host "=== Files after build ==="
          Get-ChildItem | ForEach-Object { Write-Host "  $($_.Name)" }

          # Check if zip files were created and have content
          Write-Host "=== Checking zip files ==="
          $zipFiles = Get-ChildItem *.zip -ErrorAction SilentlyContinue
          if ($zipFiles) {
            $zipFiles | ForEach-Object {
              Write-Host "Checking $($_.Name)..."
              $size = $_.Length
              Write-Host "Size: $size bytes"
              if ($size -lt 100) {
                Write-Error "ERROR: $($_.Name) is too small ($size bytes) - likely empty archive"
                exit 1
              }
            }
          } else {
            Write-Host "No zip files found!"
            exit 1
          }
