import htmlMinify, { type Options as HtmlMinifyOptions } from 'html-minifier-terser'
import { type IndexHtmlTransformContext, type Plugin } from 'vite'
import { terserOptions } from './terserOptions'

export type HtmlMinifyPluginOptions = {
  debug: boolean
  mangleProps: boolean
  terser: boolean
}

export type { HtmlMinifyOptions }

export const defaultHtmlMinifyOptions = (options: HtmlMinifyPluginOptions): HtmlMinifyOptions => ({
  includeAutoGeneratedTags: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortClassName: true,
  useShortDoctype: true,
  collapseWhitespace: true,
  collapseInlineTagWhitespace: true,
  removeEmptyAttributes: true,
  removeOptionalTags: true,
  sortAttributes: true,
  minifyCSS: true,
  minifyJS: {
    ...(options.terser ? terserOptions(options) : undefined),
  },
})

/**
 * Creates a Vite plugin that minifies HTML files.
 *
 * @param options - HTML minification options
 * @returns The HTML minify plugin
 */
export function htmlMinifyPlugin(options?: HtmlMinifyPluginOptions): Plugin {
  const { debug = false, mangleProps = false, terser = true } = options || {}
  const htmlMinifyOptions = defaultHtmlMinifyOptions({
    mangleProps,
    terser,
    debug,
  })
  const dbg = (...args: any[]) => (debug ? console.log(`[DEBUG] [html-minify]`, ...args) : undefined)

  return {
    name: 'vite:html-minify',
    transformIndexHtml: {
      handler: async (html: string, ctx?: IndexHtmlTransformContext): Promise<string> => {
        // Only minify during build
        if (!ctx || !ctx.bundle) {
          return html
        }

        dbg(`before`, html)
        const result = await htmlMinify.minify(html, htmlMinifyOptions)
        dbg(`after`, result)
        return result
      },
    },
  }
}
